var cp = require('child_process'),
	path = require('path');

var PATTERN_FN_BODY = /(\{[\s\S]*\})/m,

	PATHNAME_SERVER = path.join(__dirname, 'server.js'),

	slice = Array.prototype.slice;

function initialize() {
	var send = (function () {
			var count = 0,
				cache = {},
				child = cp.spawn('node', [ PATHNAME_SERVER ], {
					stdio: [ 'ignore', 'ignore', 'ignore', 'ipc' ]
				});

			child.on('message', function (message, handle) {
				var ticket = message.ticket,
					callback = cache[ticket];

				delete cache[ticket];

				callback && callback(message.data, handle);
			});

			return function (message, callback) {
				message.ticket = ++count;
				cache[message.ticket] = callback;
				child.send(message);
			};
		}());

	process.on('exit', function () {
		send({ type: 'EXIT' });
	});

	module.exports = function (fn) {
		var wrapper,
			queue = [];

		send({
			type: 'REGISTER',
			fn: fn.toString().replace(PATTERN_FN_BODY, '{with(this)$1}')
		}, function (message, handle) {
			var index = message.index;

			wrapper = function () {
				var args = slice.call(arguments),
					callback = args.pop();

				send({
					type: 'EXECUTE',
					index: index,
					args: args
				}, callback);
			};

			queue.forEach(function (args) {
				wrapper.apply(null, args);
			});
		});

		return function () {
			if (wrapper) {
				wrapper.apply(this, arguments);
			} else {
				queue.push(arguments);
			}
		};
	};
}

initialize();
